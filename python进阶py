name = 'nick'
s1 = str(1.1)
s2 = str([1, 2, 3])

print(f's1:{s1}, type:{type(s1)}')
print(f's2:{s2}, type:{type(s2)}')

print('s1:{},type:{}'.format(s1,type(s1)))
print('s2:{},type:{}'.format(s2,type(s2)))

# str 索引取值
msg = 'hello nick'

print(msg[6])
print(f'索引为6: {msg[6]}')
print(f'索引为-3: {msg[-3]}')

msg = 'hello nick'
#      0123456789 # 索引号

# 前闭后开
print(f'切片1到最后: {msg[1:]}')
print(f'切片1到8: {msg[1:9]}')
print(f'切片1到8，步长为2: {msg[1:9:2]}')

# 步长为正从左到右，步长为负从右到左
print(f'切片所有: {msg[:]}')
print(f'反转所有: {msg[::-1]}')
print(f'切片-5到-2: {msg[-5:-2:1]}')
print(f'切片-2到-5: {msg[-2:-5:-1]}')

# str移除空白strip()
name = '&&&n ick'
print(f"name.strip('&'): {name.strip('&')}")  # strip()默认为‘ ’，并且不修改原值，新创建空间
print(f"name: {name}")

print(f"'*-& +nick+'.strip('*-& +'): {'*-& +nick+'.strip('*-& +')}")

# str切分split
info = 'nick:male:19:18:17:16'
info_list1 = info.split(':')
info_list2 = info.split(':', 1) # 切分一次，切分的标志为:
info_list3 = info.split(':', 2) # 切分两次

print(f'info_list1:{info_list1}')
print(f'info_list2:{info_list2}')
print(f'info_list3:{info_list3}')

# str之lstrip()和rstrip()
name = '&&nick&&'

print(f"nick.lstrip('&'): {name.lstrip('&')}")
print(f"nick.rstrip('&'): {name.rstrip('&')}")

# str之lower()和upper()
name = 'Nick Chen'

print(f"name.upper(): {name.lower()}")
print(f"name.upper(): {name.upper()}")

# str之startswith()和endswith()
name = 'Nick Chen'

print(f"name.startswith('Nick'): {name.startswith('Nick')}")
print(f"name.endswith('chen'): {name.endswith('chen')}")
print(f"name.endswith('Chen'): {name.endswith('Chen')}")
print(f"name.endswith('ick Chen'): {name.endswith('ick Chen')}")

# str之rsplit()
info = 'nick:male:19'

print(f"info.rsplit(':', 1): {info.rsplit(':', 1)}")  # 从右开始切分，切分的标志为:

lis = [1,2,'19']
# print(f"':'.join(lis): {':'.join(lis)}")  # 报错，数字不可和字符串拼接

# str之join()
lis = ['nick', 'male', '19']

print(f"':'.join(lis): {':'.join(lis)}") # 拼接处用:连接
print(f"':'.join(lis): {''.join(lis)}")

# str值replace()
name = 'nick shuai'

print(f"name.replace('shuai','handsome'): {name.replace('shuai','handsome')}")

# []内可以有多个任意类型的值，逗号分隔元素
# my_girl_friend = list(['jason','tank','sean'])
my_girl_friend = ['jason', 'tank', 'sean']

print(f"my_girl_friend: {my_girl_friend}")

l = list('hello nick')
print(f"l: {l}")

# list之索引取值
name_list = ['nick', 'jason', 'tank', 'sean']
name_list[0] = 'nick handsom'
# name_list[1000] = 'tank sb'  # 报错

print(f"name_list[0]: {name_list[0]}")
print(f"name_list[0]: {name_list[1]}")
print(f"name_list[0]: {name_list[1]}")

# list之切片
name_list = ['nick', 'jason', 'tank', 'sean']

print(f"name_list[0:3:2]: {name_list[0:3:2]}")

# list之长度
name_list = ['nick', 'jason', 'tank', 'sean']

print(f"len(name_list): {len(name_list)}")

# list之成员运算in和not in
name_list = ['nick', 'jason', 'tank', 'sean']

print(f"'tank sb' in name_list: {'tank sb' in name_list}")
print(f"'nick handsome' not in name_list: {'nick handsome' not in name_list}")

# list之追加值
name_list = ['nick', 'jason', 'tank', 'sean']
name_list.append('tank sb')

print(f"name_list: {name_list}")

my_girl_friend = tuple(('jason','tank','sean'))
print(f"my_girl_friend: {my_girl_friend}")
my_girl_friend = ('jason', 'tank', 'sean')
print(f"my_girl_friend: {my_girl_friend}")

# tuple之索引取值
name_tuple = ('nick', 'jason', 'tank', 'sean')
# name_tuple[0] = 'nick handsom'  # 报错

print(f"name_tuple[0]: {name_tuple[0]}")

# tuple之切片
name_tuple = ('nick', 'jason', 'tank', 'sean')

print(f"name_tuple[1:3:2]: {name_tuple[1:3:2]}")

# tuple之长度
name_tuple = ('nick', 'jason', 'tank', 'sean')

print(f"len(name_tuple): {len(name_tuple)}")

# tuple之循环
name_tuple = ('nick', 'jason', 'tank', 'sean')

for name in name_tuple:
    print(name)

# tuple之count()
name_tuple = ('nick', 'jason', 'tank', 'sean')

print(f"name_tuple.count('nick'): {name_tuple.count('nick')}")

l = ['a', 'b', 'c']
print(f"id(l[0]): {id(l[0])}")
l[0] = 'A'
print(f"id(l[0]): {id(l[0])}")

t1 = (['a', 'b', 'c'], 'wc', 'office')

print(f"id(t1[0]): {id(t1[0])}")
print(f"id(t1[1]): {id(t1[1])}")
print(f"id(t1[2]): {id(t1[2])}")

t1[0][0] = 'A'
print(f"t1[0][0]: {t1[0][0]}")
print(f"id(t1[0]): {id(t1[0])}")
print(f"t1: {t1}")

dic = {'a': 1, 'b': 2}  # dic = dict({'a':1,'b':2})

print(f"dic: {dic}")

dic = dict(a=1, b=2, c=3)

print(f"dic: {dic}")

dic = {1: 'a', 0: 'b'}

print(f"dic[0]: {dic[0]}")  # 无法区分dic是列表，还是字典，并且key不再具有描述信息

# dic之长度len
dic = {'a': 1, 'b': 2}

print(f"len(dic): {len(dic)}")

# dic之成员运算in和not in
dic = {'a': 1, 'b': 2}

print(f"'a' in dic: {'a' in dic}")
print(f"1 in dic: {1 in dic}")

# dic之删除del
dic = {'a': 1, 'b': 2}
del dic['a']

print(f"dic.get('a'): {dic.get('a')}")

# dic之删除pop()
dic = {'a': 1, 'b': 2}
dic.pop('a')  # 指定元素删除

print(f"dic.pop('b'): {dic.pop('b')}")
print(f"dic.get('a'): {dic.get('a')}")

# dic之删除popitem()
dic = {'a': 1, 'b': 2}

print(f"dic.popitem(): {dic.popitem()}")  # popitem() 方法随机返回并删除字典中的一对键和值(一般删除末尾对)。

# dic之循环
# dic是无序的，但是python3采用了底层优化算法，所以看起来是有序的，但是python2中的字典是无序
dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

for k, v in dic.items():  # items可以换成keys()、values()
    print(k, v)

# dic之update()
dic1 = {'a': 1, 'b': 2}
dic2 = {'c': 3}
dic1.update(dic2)

print(f"dic1: {dic1}")

# dic之fromkeys()
# 创建一个新字典
seq = ('name', 'age', 'sex')

dic = dict.fromkeys(seq)

print(f'dic: {dic}')

dic = dict.fromkeys(['name', 'age', 'sex'], None)

print(f"dic: {dic}")

# dic之setdefault()，有指定key不会改变值；无指定key则改变值
dic = {'a': 1, 'b': 2}

print(f"dic.setdefault('a'): {dic.setdefault('a',3)}")
print(f"dic: {dic}")
print(f"dic.setdefault('c'): {dic.setdefault('c',3)}")
print(f"dic: {dic}")

# 统计s='hello tank tank say hello sb sb'中每个单词的个数
s='hello tank tank say hello sb sb'

l=s.split()

print(l)

dic={}
for item in l:
    if item in dic:
        dic[item]+=1
    else:
        dic[item]=1
print(dic)

import numpy as np

arr1 = np.array([[1, 2, 3], [4, 5, 6]])
print(arr1.shape)
arr2 = np.array([[7, 8], [9, 10], [11, 12]])
print(arr2.shape)

assert arr1.shape[0] == arr2.shape[1]
# 2*3·3*2 = 2*2
print(arr2.shape)